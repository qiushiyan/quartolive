// Public: Extend only the variants of a Shiny-style module. Useful for
//         remapping a module's variants without re-extending everything.
//
// $component_name  - The name of the module to extend the variants from.
// $variants...     - A list of variants belonging to the module to extend.
//
// Example:
//
// With a module definition like so:
//
// ```scss
// %Component {
//     font-size: 14px;
//     color: red;
//     &%-variant {
//         color: blue;
//     }
//     &%-variant_group--one {
//         font-weight: 300;
//     }
//     &%-variant_group--two {
//         font-weight: 700;
//     }
// }
// ```
//
// Calling extend with the component and all its variants...
//
// ```scss
// .Alpha {
//     @include extend(Component);
//     &.-featured {
//         @include extend-variants(Component, variant, variant_group one);
//     }
// }
// .Beta {
//     @include extend(Component, variant_group two);
// }
// ```
//
// ...yields the following CSS:
//
// ```css
// .Alpha, .Beta {
//     font-size: 14px;
//     color: red;
// }
// .Alpha.-featured {
//     color: blue;
// }
// .Alpha.-featured {
//     font-weight: 300;
// }
// .Beta {
//     font-weight: 700; 
// }
// ```
//
@mixin extend-variants($component_name, $variants...) {
    @each $variant in $variants {
        @if type_of($variant) == "list" {
            $variant: #{nth($variant, 1)}--#{nth($variant, 2)};
        }
        @extend %#{$component_name}%-#{$variant};
    }
}


// Public: Extend a Shiny-style component and its variants that are defined
//         using placeholder selectors.
//
// $component_name  - The name of the component to extend.
// $variants...     - (optional) A list of variants belonging to the given
//                      component to extend.
//
// Example:
//
// With a component definition like so:
//
// ```scss
// %Component {
//     font-size: 14px;
//     color: red;
//     &%-variant {
//         color: blue;
//     }
//     &%-variant_group--one {
//         font-weight: 300;
//     }
//     &%-variant_group--two {
//         font-weight: 700;
//     }
// }
// ```
//
// Calling extend with the component and all its variants...
//
// ```scss
// .Alpha {
//     @include extend(Component, variant, variant_group one);
// }
// .Beta {
//     @include extend(Component, variant_group two);
// }
// ```
//
// ...yields the following CSS:
//
// ```css
// .Alpha, .Beta {
//     font-size: 14px;
//     color: red;
// }
// .Alpha {
//     color: blue;
// }
// .Alpha {
//     font-weight: 300;
// }
// .Beta {
//     font-weight: 700; 
// }
// ```
//
@mixin extend($component_name, $variants...) {
    @extend %#{$component_name};
    @include extend-variants($component_name, $variants...);
}



// Public: Add declarations to be used when a certain state is active.
//
// $state   - The name of the state to match.
// $value   - (optional: true) The value of the state. Will be wrapped in "".
//
// Example:
//
// ```scss
// .SomeComponent {
//     @include state(loading) {
//         opacity: 0.5;
//     }
// }
// ```
//
// ```css
// .SomeComponent[data-loading="true"] {
//     opacity: 0.5;
// }
// ```
//
// ```scss
// .SomeComponent {
//     @include state(progress, 50) {
//         opacity: 0.5;
//     }
// }
// ```
//
// ```css
// .SomeComponent[data-progress="50"] {
//     opacity: 0.5;
// }
// ```
@mixin state($state, $val: true) {
    &[data-#{$state}="#{$val}"] {
        @content;
    }
}



// Public: Auto extend a module defined using placeholder selectors (%) into
//         actual classes (with . prefix).
//
// $module_name     - The name of the module to extend.
// $variants...     - (optional) A list of variants belonging to the given
//                      module to extend.
//
// Example:
//
// With a module definition like so:
//
// ```scss
// %Component {
//     font-size: 14px;
//     color: red;
//     &%-variant {
//         color: blue;
//     }
//     &%-variant_group--one {
//         font-weight: 300;
//     }
//     &%-variant_group--two {
//         font-weight: 700;
//     }
// }
// ```
//
// Calling auto-extend with the module and all its variants...
//
// ```scss
// @include auto-extend(Component, variant, variant_group one, variant_group two);
// ```
//
// ...yields the following CSS:
//
// ```css
// .Component {
//     font-size: 14px;
//     color: red;
// }
// .Component.-variant {
//     color: blue;
// }
// .Component.-variant_group--one {
//     font-weight: 300;
// }
// .Component.-variant_group--two {
//     font-weight: 700;
// }
// ```
//
@mixin auto-extend($component_name, $variants...) {
    .#{$component_name} {
        @include extend($component_name);
        @each $variant in $variants {
            $sel: $variant;
            @if type_of($sel) == "list" {
               $sel: "#{nth($sel, 1)}--#{nth($sel, 2)}";
            }
            &.-#{$sel} {
                @include extend-variants($component_name, $variant);
            }
        }
    }
}

